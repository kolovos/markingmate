rule Exam 
	merge l : Left!Exam
	with r : Right!Exam
	into t : Target!Exam {
	
	t.questions ::= l.questions;
	t.students ::= l.students;
}


rule Question 
	merge l : Left!Question
	with r : Right!Question
	into t : Target!Question {
	
	t.title = l.title;
	t.description = l.description;
	t.marks = l.marks;
}

rule Student 
	merge l : Left!Student
	with r : Right!Student
	into t : Target!Student {
	
	t.number = l.number;
	
}

rule Answer 
	merge l : Left!Answer
	with r : Right!Answer
	into t : Target!Answer {
	
	if (l.marks <> 0 and r.marks <> 0) {
		throw "Different marks found for answer " +
			l.question.title + " of student " + l.student.number + ": " + l.marks + " <-> " + r.marks;		
	}
	else {
		t.marks = Sequence{l.marks, r.marks}.max();
		if (l.feedback.isDefined()) {
			t.feedback = l.feedback;
		}
		else {
			t.feedback = r.feedback;
		}
	}
	
	t.question = l.question.equivalent();
	t.student = l.student.equivalent();
	
}

rule Answer 
	transform s : Source!Answer
	to t : Target!Answer {
	
	t.marks = s.marks;
	t.feedback = s.feedback;
	
	t.question = s.question.equivalent();
	t.student = s.student.equivalent();
	
}